#!/usr/bin/env node

const fs = require('fs')


// usage represents the help guide
const usage = function() {
  const usageText = `
  usage:
    ./parking_lot
    ./parking_lot <filename>

    jika tidak menyertakan filename maka akan menjalankan cli
  `

  console.log(usageText)
}



// command functions
function writeLots(lots, successMessage){
    try{
        lots = JSON.stringify(lots, null, 2)
        fs.writeFileSync('./lots_record.json', lots, 'utf8')
        console.log(successMessage)
    }
    catch(err){
        console.log(err)
    }
}

function getLots(){
    return JSON.parse(fs.readFileSync('./lots_record.json', 'utf8'))
}

function createParkingLot(qt_lot){
    const lot = {
        regnumber: "",
        color: "",
        available: true
    }
    var lots = {}
    if(qt_lot>=1){
        for(i = 1; i <= qt_lot; i++){
            lots[i]=lot
        }
    }
    
    writeLots(lots, 'Created a parking lot with ' + qt_lot + ' slots')
    
}

function park(regnumb, clor){
    var lots = getLots()
    var last_lot = 0;
    for (var lot in lots){
        if(lots[lot].available){
            lots[lot].available = false
            lots[lot].regnumber = regnumb
            lots[lot].color = clor
            last_lot = lot
            break
        }
    }
    if(last_lot!=0){
        writeLots(lots, 'Allocated slot number: '+ last_lot)
    }else{
        console.log("Sorry, parking lot is full")
    }
    
}

function leave(num_lot){
    var lots = getLots()

    lots[num_lot].regnumber = ""
    lots[num_lot].color = ""
    lots[num_lot].available = true

    writeLots(lots, 'Slot number '+ num_lot +' is free')
    
}

function status(){
    var lots = getLots()

    console.log("Slot No.\tRegistration No.\tColour")
    for (var i in lots){
        if(!lots[i].available){
            console.log(i + '\t\t' + lots[i].regnumber + "\t\t\t" + lots[i].color)
        }
    }
    
}

function regnumbByColor(color){
    var lots = getLots()

    var result=[];
    var count = 0;
    for (var i in lots){
        if(lots[i].color == color){
            result.push(lots[i].regnumber)
            count++
        }
    }
    if(count>0){
        console.log(result.join(', '))    
    }else{
        console.log("Not found")
    }

}

function slotnumbByColor(color){
    var lots = getLots()
    
    var result=[]
    var count = 0
    for (var i in lots){
        if(lots[i].color == color){
            result.push(i)
            count++
        }
    }
    if(count>0){
        console.log(result.join(', '))    
    }else{
        console.log("Not found")
    }

}

function slotnumbByReg(regnumb){
    var lots = getLots()
    
    var result=[];
    var count = 0
    for (var i in lots){
        if(lots[i].regnumber == regnumb){
            result.push(i)
            count++
        }
    }
    if(count>0){
        console.log(result.join(', '))    
    }else{
        console.log("Not found")
    }
}

// run command
function run(argu){
    cmd = argu.split(" ")
    switch(cmd[0]){
        case "create_parking_lot":
            if(cmd[1]){
                createParkingLot(cmd[1])
            }
            break
        case "park":
            if(cmd[1] && cmd[2]){
                park(cmd[1], cmd[2])
            }
            break
        case "leave":
            if(cmd[1]){
                leave(cmd[1])
            }
            break
        case "status":
            status()
            break
        case "registration_numbers_for_cars_with_colour":
            if(cmd[1]){
                regnumbByColor(cmd[1])
            }
            break
        case "slot_numbers_for_cars_with_colour":
            if(cmd[1]){
                slotnumbByColor(cmd[1])
            }
            break
        case "slot_number_for_registration_number":
            if(cmd[1]){
                slotnumbByReg(cmd[1])
            }
            break
        case "exit":
            process.exit()
        default:
            console.log('invalid command passed')
            usage()
        }
    return cmd
}



const args = process.argv.slice(2)

// arg maksimal 1

if (args.length > 1) {
  console.log(`only one argument can be accepted`)
  usage()
}else if(args.length == 1){
    // read command from filename.txt
    var filename = args[0]
    var command = fs.readFileSync(filename, 'utf8').split(/\r?\n/)
    
    for (i in command){
        console.log(command[i])
        run(command[i])
        console.log('\n')
    }
}else{
    // read command from cli
    process.stdin.on('data', function(data){
        run(data.toString().trim())
    })
}
